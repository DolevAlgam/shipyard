# Task ID: 3
# Title: Create OpenAI Client Wrapper
# Status: done
# Dependencies: 1
# Priority: high
# Description: Implement the OpenAI SDK integration layer with proper error handling, retry logic, and message formatting for the Chat Completions API
# Details:
Implement core/openai_client.py:
```python
import os
import time
from openai import OpenAI
from typing import List, Dict, Optional

class OpenAIClient:
    def __init__(self):
        self.client = OpenAI(
            api_key=os.environ.get("OPENAI_API_KEY")
        )
        self.max_retries = 3
        self.base_delay = 1
    
    async def call_agent(self, system_prompt: str, user_message: str, 
                        chat_history: Optional[List[Dict]] = None) -> str:
        messages = [{"role": "system", "content": system_prompt}]
        
        if chat_history:
            messages.extend(chat_history)
        
        messages.append({"role": "user", "content": user_message})
        
        for attempt in range(self.max_retries):
            try:
                response = self.client.chat.completions.create(
                    model="gpt-4o",
                    messages=messages,
                    temperature=0.7,
                    max_tokens=1000
                )
                return response.choices[0].message.content
            except Exception as e:
                if attempt < self.max_retries - 1:
                    delay = self.base_delay * (2 ** attempt)
                    time.sleep(delay)
                else:
                    raise e
    
    def build_system_prompt(self, base_prompt: str, context: Dict) -> str:
        try:
            return base_prompt.format(**context)
        except KeyError:
            import json
            return f"{base_prompt}\n\nCONTEXT:\n{json.dumps(context, indent=2)}"
```

# Test Strategy:
Mock OpenAI API responses to test retry logic, error handling, and message formatting. Verify exponential backoff works correctly and system prompts are properly formatted with context.
